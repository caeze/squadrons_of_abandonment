import "@babylonjs/core/Debug/debugLayer";
import "@babylonjs/inspector";
import "@babylonjs/loaders/glTF";
import { Engine, Scene, ArcRotateCamera, FreeCamera, Vector3, HemisphericLight, Mesh, MeshBuilder, InstancedMesh, StandardMaterial, Texture, Vector4 , Color3, SceneLoader, AssetsManager, ArcRotateCameraPointersInput, CubeTexture, RegisterMaterialPlugin, MaterialPluginBase, PostProcess, PassPostProcess, Effect, ShaderMaterial, RenderTargetTexture } from "@babylonjs/core";
import { AdvancedDynamicTexture, Button } from '@babylonjs/gui/2D';

// How to run:
// https://doc.babylonjs.com/guidedLearning/createAGame/gettingSetUp
// npm run build
// npm run start
// http://localhost:8080/

// sound playback : https://www.babylonjs-playground.com/#PCY1J#8

// select objects with box: https://playground.babylonjs.com/#2SA7J8#7

// mouse control: https://forum.babylonjs.com/t/arcrotatecamera-and-right-click/4901

// switch scenes: https://doc.babylonjs.com/features/featuresDeepDive/scene/multiScenes

// Squadrons of abandonement https://youtu.be/qxrV2pqroDY
// FoW https://playground.babylonjs.com/#BRXZVE#8
// FoW2 https://playground.babylonjs.com/#8WJTJG#9
// Fow3 https://playground.babylonjs.com/#8WJTJG
// Entity selection https://playground.babylonjs.com/#GCNNPT#36


// custom handling of materials for render target pass
var createScene = function (engine: Engine, canvas: any): Scene {
    const showRobots = true;
    const showSpheres = true;
    const showGround = true;
    const animate = true;
    
    // TODO: define not constant
    var currentUrl = "http://localhost:8080";

    // This creates a basic Babylon Scene object (non-mesh)
    var scene = new Scene(engine);

    // This creates and positions a free camera (non-mesh)
    var camera = new FreeCamera("camera1", new Vector3(0, 3, -7), scene);

    // This targets the camera to scene origin
    camera.setTarget(Vector3.Zero());

    // This attaches the camera to the canvas
    camera.attachControl(canvas, true);

    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
    var light = new HemisphericLight("light", new Vector3(0, 1, 0), scene);

    // Default intensity is 1. Let's dim the light a small amount
    light.intensity = 0.7;

    // first pass, render scene with original materials
    var imagePass = new PassPostProcess("imagePass", 1.0, camera, Texture.NEAREST_SAMPLINGMODE, engine);

    // second pass with a shader material. Let's make some fake caustic
    Effect.ShadersStore.causticVertexShader = `
precision highp float;

attribute vec3 position;
attribute vec3 normal;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 worldViewProjection;

varying vec3 vNormal;
varying vec3 vPosition;

#include<bonesDeclaration>
#include<instancesDeclaration>

void main() {
    vec3 positionUpdated = position;

    // include shaders to calculate instances and bones
    #include<instancesVertex>
    #include<bonesVertex>

    // return normal, uv and position
    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);
    vNormal = normalize(vec3(finalWorld * vec4(normal, 0.0)));
    vPosition = worldPos.xyz;

    gl_Position = projection * view * worldPos;
}
        `;
    Effect.ShadersStore.causticFragmentShader = `
#ifdef GL_ES
precision highp float;
#endif

#define TAU 6.28318530718
#define MAX_ITER 5
#define SPEED 0.3
#define SCALE 10.0

uniform float time;

varying vec3 vNormal;
varying vec3 vPosition;

// nice caustic function
vec4 caustic(vec2 uv) {
  vec2 p = mod(uv*TAU, TAU)-250.0;
  float t = time * SPEED + 23.0;

  vec2 i = vec2(p);
  float c = 1.0;
  float inten = .005;

  for (int n = 0; n < MAX_ITER; n++) {
    float t = t * (1.0 - (3.5 / float(n+1)));
    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
    c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
  }

  c /= float(MAX_ITER);
  c = 1.17-pow(c, 1.4);
  vec3 color = vec3(pow(abs(c), 8.0));
  color = clamp(color + vec3(0.0, 0.0, 0.0), 0.0, 1.0);

  float contrast=0.0;
  color = mix(color, vec3(1.0,1.0,1.0),contrast);
  vec4 color4 = vec4(color,0.0);

  return color4;
}

void main(void)
{
    vec4 baseLight = vec4(0.3, 0.3, 0.3, 1.0);
    // if fragment points at least a bit up
    if (vNormal.y > 0.0) {
        // use world coordinates as the uv caustic coordinates
        vec2 coord = vec2(fract(vPosition.x/SCALE), fract(vPosition.z/SCALE));
        // compensate by y angle
        gl_FragColor = clamp(caustic(coord), 0.0, 0.7)*vNormal.y + baseLight;
    }
    else {
        // otjtherwise just a little bit of color
        gl_FragColor = baseLight;
    }
}
    `;
    const causticMaterial = new ShaderMaterial(
        'caustic shader material', // human name
        scene,
        'caustic', // shader path
        {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['world', 'worldView', 'worldViewProjection', 'view', 'projection', 'time', 'direction']
        }
    );

    // the render texture. We'll render the scene with caustic shader to this texture.
    const renderTarget = new RenderTargetTexture('caustic texture', 512, scene);
    scene.customRenderTargets.push(renderTarget);

    // third pass: merge two previous passes
    Effect.ShadersStore.finalFragmentShader = `
        #ifdef GL_ES
        precision mediump float;
        #endif

        varying vec2 vUV;
                
        uniform sampler2D textureSampler;
        uniform sampler2D causticTexture;

        void main(void)
        {
            vec4 first = texture2D(textureSampler, vUV);
            vec4 caustic = texture2D(causticTexture, vUV);
            // mixes colors
            if (vUV.x <= 0.333) { // show only base texture
                gl_FragColor = first;
            }
            else if (vUV.x <= 0.666) { // show only caustic texture
                gl_FragColor.rgb = caustic.rgb - vec3(0.1, 0.1, 0.2);
                gl_FragColor.a = 0.5;
            }
            else { // mix both
                gl_FragColor = clamp(mix(first, caustic, 0.5), 0.0, 1.0);
                gl_FragColor.a = 1.0;
            }
        }
    `;
    // create the final pass
    var finalPass = new PostProcess(
        'Final compose shader',
        'final',  // shader
        null, // attributes
        ['causticTexture'], // textures
        1.0,  // options
        camera, // camera
        Texture.BILINEAR_SAMPLINGMODE, // sampling
        engine // engine
    );
    finalPass.onApply = (effect) => {
        // update the caustic texture with what we just rendered.
        effect.setTexture('causticTexture', renderTarget);
    };

    // helper function to create clones of the caustic material
    // we need that because we'll have different transforms on the shaders
    let rttMaterials: ShaderMaterial[] = [];
    const getCausticMaterial = () => {
        let c = causticMaterial.clone("causticMaterialClone");
        c.freeze(); // freeze because we'll only update uniforms
        rttMaterials.push(c);
        return c;
    };

    // some material for the ground.
    var grass0 = new StandardMaterial("grass0", scene);
    grass0.diffuseTexture = new Texture(currentUrl + "/assets/img/ground_plane_grid/ground_plane_grid.png", scene);
    grass0.freeze();

    // Our built-in 'ground' shape.
    var ground;
    if (showGround) {
        ground = MeshBuilder.CreateGround("ground", { width: 6, height: 6 }, scene);
        ground.material = grass0;
        // add caustics
        renderTarget.setMaterialForRendering(ground, getCausticMaterial());
        if (renderTarget.renderList != null) {
            renderTarget.renderList.push(ground);
        }
    }
    
    // grid
    var mat = new StandardMaterial("mat", scene);
    var texture = new Texture(currentUrl + "/assets/img/ground_plane_grid/ground_plane_grid.png", scene);
    texture.uScale = 400;
    texture.vScale = 200;
    texture.hasAlpha = true;
    mat.diffuseTexture = texture;
    mat.useAlphaFromDiffuseTexture = true;
    mat.alpha = 0.5;
    
    /*const f = new Vector4(0, 0, 0.5, 1); // front image = half the whole image along the width 
    const b = new Vector4(0.5, 0, 1, 1); // back image = second half along the width
    
    const plane = MeshBuilder.CreatePlane("plane", {frontUVs: f, backUVs: b, sideOrientation: Mesh.DOUBLESIDE, size: 1000, width: 200, height: 200});
    plane.rotation = new Vector3(Math.PI / 2, 0, 0);
    plane.material = mat;
    renderTarget.setMaterialForRendering(plane, getCausticMaterial());
    renderTarget.renderList.push(plane);*/
    const f = new Vector4(0, 0, 0.5, 1); // front image = half the whole image along the width 
    const b = new Vector4(0.5, 0, 1, 1); // back image = second half along the width
    const plane = MeshBuilder.CreatePlane("plane", {frontUVs: f, backUVs: b, sideOrientation: Mesh.DOUBLESIDE, size: 1000, width: 200, height: 200});
    plane.material = mat;
    plane.rotation = new Vector3(Math.PI / 2, 0, 0);
    renderTarget.setMaterialForRendering(plane, getCausticMaterial());
    if (renderTarget.renderList != null) {
        renderTarget.renderList.push(plane);
    }

    /*// an animated object and its multiple instances
    if (showRobots) {
        const assetsManager = new AssetsManager(scene);
        const modelTask = assetsManager.addMeshTask('model', null, "/scenes/BrainStem/", "BrainStem.gltf");
        //const modelTask = assetsManager.addMeshTask('model', null, "/scenes/Dude/", "dude.babylon");
        modelTask.onSuccess = (task) => {
            task.loadedMeshes.forEach((mesh) => {
                mesh.material?.freeze();
                renderTarget.setMaterialForRendering(mesh, getCausticMaterial());
                mesh.isVisible = false; // the main mesh is not rendered, we'll render the instances
                if (renderTarget.renderList != null) {
                    renderTarget.renderList.push(mesh); // but we add it to the RTT
                }
            });

            const rootMesh = task.loadedMeshes[0];
            for (let i = 0; i < 5; i++) {
                const instance = rootMesh.instantiateHierarchy();
                if (instance != null) {
                    instance.scaling.setAll(0.5);
                    instance.position.x += i - 2;
                    instance.getChildMeshes().forEach((mesh) => {
                        if (renderTarget.renderList != null) {
                            renderTarget.renderList.push(mesh); // add them to the RTT
                        }
                    });
                }
            }

            scene.animationsEnabled = animate;
        };
        assetsManager.onTaskErrorObservable.add(function (task) {
            console.error('task failed', task.errorObject.message, task.errorObject.exception);
        });
        assetsManager.load();
    }*/

    // Our built-in 'sphere' shape, with several instances
    let spheres: InstancedMesh[] = [];
    if (showSpheres) {
        let sphereBase = MeshBuilder.CreateSphere("sphere", { diameter: 2, segments: 32 }, scene);
        sphereBase.material = grass0.clone("grass0Clone");
        sphereBase.setEnabled(false);
        renderTarget.setMaterialForRendering(sphereBase, getCausticMaterial());
        if (renderTarget.renderList != null) {
            renderTarget.renderList.push(sphereBase);
        }
        for (let i = 0; i < 20; i++) {
            for (let j = 0; j < 4; j++) {
                let sphere = sphereBase.createInstance("sphere" + i + "x" + j);
                //sphere._base_x = 2 * j - 3;
                sphere.position.x = 2 * j - 3;
                sphere.position.y = 1;
                sphere.position.z = 2 * i + 4;
                spheres.push(sphere);
                if (renderTarget.renderList != null) {
                    renderTarget.renderList.push(sphere);
                }
            }
        }
    }

    // update time on shader
    if (animate) {
        const startTime = new Date().getTime();
        scene.onBeforeRenderObservable.add(() => {
            const endTime = new Date().getTime();
            const timeDiff = (endTime - startTime) / 1000.0; // in s

            // animate caustic
            rttMaterials.forEach((c) => c.setFloat('time', timeDiff));

            // move spheres around
            if (showSpheres) {
                let deltaX = Math.sin(endTime / 1000.0) / 100.0;
                spheres.forEach((s) => {
                    s.position.x = s.position.x + deltaX;
                })
            }
        });
    }

    return scene;
};


class App {
    private name: string;
    public constructor(name: string) {
        // assign parameters
        this.name = name;
        
        // TODO: describe
        var canvas = document.createElement("canvas");
        /*var gl = canvas.getContext("webgl");
        if (gl != null) {
            gl.getParameter(gl.RENDERER);
        }*/
        canvas.style.width = window.innerWidth + "px";
        canvas.style.height = window.innerHeight + "px";
        canvas.id = "gameCanvas";
        document.body.appendChild(canvas);
        document.body.style.cssText = "margin: 0; padding: 0; height: 100%; overflow: hidden;";
        
        // get current URL
        var currentUrl = "http://localhost:8080";

        // initialize engine and scene
        var engine = new Engine(canvas, true);
        var scene = createScene(engine, canvas);

        var camera: ArcRotateCamera = new ArcRotateCamera("MainCamera", -Math.PI / 2, Math.PI / 4, 4, Vector3.Zero(), scene);
        camera.upperRadiusLimit = 10;
        camera.lowerRadiusLimit = 0.01;
        camera.angularSensibilityX = 1000;
        camera.angularSensibilityY = 1000;
        camera.wheelDeltaPercentage = 0.1;
        camera.checkCollisions = true;
        camera.inertia = 0.6;
        camera.allowUpsideDown = false;
        (camera.inputs.attached.pointers as ArcRotateCameraPointersInput).buttons = [1];
        camera.inputs.remove(camera.inputs.attached.keyboard);
        camera.minZ = 0.1;
        camera.attachControl(canvas, true);
        var light1: HemisphericLight = new HemisphericLight("light1", new Vector3(1, 1, 0), scene);
        
        const skybox = MeshBuilder.CreateBox("skyBox", { size: 1000.0 }, scene);
        const skyboxMaterial = new StandardMaterial("skyBox", scene);
        skyboxMaterial.backFaceCulling = false;
        skyboxMaterial.reflectionTexture = new CubeTexture(currentUrl + "/assets/img/skybox/skybox", scene);
        skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;
        skyboxMaterial.diffuseColor = new Color3(0, 0, 0);
        skyboxMaterial.specularColor = new Color3(0, 0, 0);
        skybox.material = skyboxMaterial;
        
        var originSphere: Mesh = MeshBuilder.CreateSphere("sphere", { diameter: 0.1 }, scene);
        
        var xSphere: Mesh = MeshBuilder.CreateSphere("xsphere", { diameter: 0.1 }, scene);
        var xSphereMaterial = new StandardMaterial("mat", scene);
        xSphereMaterial.alpha = 1;
        xSphereMaterial.diffuseColor = new Color3(1, 0, 0);
        xSphere.material = xSphereMaterial;
        xSphere.position = new Vector3(1, 0, 0);
        xSphere.isPickable = true;
        
        var ySphere: Mesh = MeshBuilder.CreateSphere("ysphere", { diameter: 0.1 }, scene);
        var ySphereMaterial = new StandardMaterial("mat", scene);
        ySphereMaterial.alpha = 1;
        ySphereMaterial.diffuseColor = new Color3(0, 1, 0);
        ySphere.material = ySphereMaterial;
        ySphere.position = new Vector3(0, 1, 0);
        ySphere.isPickable = true;
        
        var zSphere: Mesh = MeshBuilder.CreateSphere("zsphere", { diameter: 0.1 }, scene);
        var zSphereMaterial = new StandardMaterial("mat", scene);
        zSphereMaterial.alpha = 1;
        zSphereMaterial.diffuseColor = new Color3(0, 0, 1);
        zSphere.material = zSphereMaterial;
        zSphere.position = new Vector3(0, 0, 1);
        zSphere.isPickable = true;
        
        /*var mat = new StandardMaterial("mat", scene);
        var texture = new Texture(currentUrl + "/assets/img/ground_plane_grid/ground_plane_grid.png", scene);
        texture.uScale = 400;
        texture.vScale = 200;
        texture.hasAlpha = true;
        mat.diffuseTexture = texture;
        mat.useAlphaFromDiffuseTexture = true;
        mat.alpha = 0.5;
        
        const f = new Vector4(0, 0, 0.5, 1); // front image = half the whole image along the width 
        const b = new Vector4(0.5, 0, 1, 1); // back image = second half along the width
        
        const plane = MeshBuilder.CreatePlane("plane", {frontUVs: f, backUVs: b, sideOrientation: Mesh.DOUBLESIDE, size: 1000, width: 200, height: 200});
        plane.rotation = new Vector3(Math.PI / 2, 0, 0);
        plane.material = mat;
        plane.isPickable = true;*/

        /**
         * INSTANTIATE FOG OF WAR PLUGIN
         */
        /*RegisterMaterialPlugin("FogOfWar", (material) => {
            //material.fogofwar = new FogOfWarPluginMaterial(material);
            //return material.fogofwar;
            return new FogOfWarPluginMaterial(material);
        });*/
        

        scene.onPointerDown = function (evt, pickResult) {
            // We try to pick an object
            if (pickResult.hit && pickResult.pickedMesh != null) {
                console.log(pickResult.pickedMesh.name);
            }
        };
        
        // hide/show the Inspector
        window.addEventListener("keydown", (ev) => {
            // Shift+Ctrl+Alt+I
            if (ev.shiftKey && ev.ctrlKey && ev.altKey && ev.key === "i") {
                if (scene.debugLayer.isVisible()) {
                    scene.debugLayer.hide();
                } else {
                    scene.debugLayer.show();
                }
            }
            if (ev.key === "i") {
                if (scene.debugLayer.isVisible()) {
                    scene.debugLayer.hide();
                } else {
                    scene.debugLayer.show();
                }
            }
            if (ev.key === "j") {
                camera.setTarget(new Vector3(camera.getTarget().x, camera.getTarget().y + 0.01, camera.getTarget().z));
            }
            if (ev.key === "w") {
                camera.setTarget(new Vector3(camera.getTarget().x + 0.01, camera.getTarget().y, camera.getTarget().z));
            }
            if (ev.key === "a") {
                camera.setTarget(new Vector3(camera.getTarget().x - 0.01, camera.getTarget().y, camera.getTarget().z));
            }
            if (ev.key === "s") {
                camera.setTarget(new Vector3(camera.getTarget().x, camera.getTarget().y, camera.getTarget().z + 0.01));
            }
            if (ev.key === "d") {
                camera.setTarget(new Vector3(camera.getTarget().x, camera.getTarget().y, camera.getTarget().z - 0.01));
            }
            if (ev.key === "f") {
                this.launchFullscreen();
            }
        });
        
        window.addEventListener("resize", function() {
            canvas.style.width = window.innerWidth + "px";
            canvas.style.height = window.innerHeight + "px";
            engine.resize();
        });

        // GUI
        var advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI("UI");

        var button1 = Button.CreateSimpleButton("but1", "Click Me");
        button1.left = "1000px";
        button1.top = "500px";
        button1.width = "150px";
        button1.height = "40px";
        button1.color = "white";
        button1.cornerRadius = 20;
        button1.background = "green";
        button1.onPointerUpObservable.add(function() {
            alert("you did it!");
        });
        advancedTexture.addControl(button1);  
        
        // run the main render loop
        engine.runRenderLoop(() => {
            // here all updating stuff must be updated
            scene.render();
        });
    }
    
    private someRandomMethod(name: string): string {
        return name;
    }
    
    private launchFullscreen() {
        var element = document.documentElement;
        if (element.requestFullscreen) {
            element.requestFullscreen();
        }
    }
}

/*class FogOfWarPluginMaterial extends MaterialPluginBase {
    constructor(material) {
        // last parameter is a priority, which lets you define the order multiple plugins are run.
        super(material, "FogOfWar", 200, { "FogOfWar": false });

        // let's enable it by default
        this.isEnabled = true;
    }

    static fogCenter = new Vector3(1, 1, 0);

    get isEnabled() {
        return this._isEnabled;
    }

    set isEnabled(enabled) {
        if (this._isEnabled === enabled) {
            return;
        }
        this._isEnabled = enabled;
        this.markAllDefinesAsDirty();
        this._enable(this._isEnabled);
    }

    _isEnabled = false;

    // Also, you should always associate a define with your plugin because the list of defines (and their values) 
    // is what triggers a recompilation of the shader: a shader is recompiled only if a value of a define changes.
    prepareDefines(defines, scene, mesh) {
        defines["FogOfWar"] = this._isEnabled;
    }

    getClassName() {
        return "FogOfWarPluginMaterial";
    }

    getUniforms() {
        return {
            "ubo": [
                { name: "fogCenter", size: 3, type: "vec3" },
            ],
            "fragment":
                `#ifdef FogOfWar
                    uniform vec3 fogCenter;
                #endif`,
        };
    }

    bindForSubMesh(uniformBuffer, scene, engine, subMesh) {
        if (this._isEnabled) {
            uniformBuffer.updateVector3("fogCenter", FogOfWarPluginMaterial.fogCenter);
        }
    }

    getCustomCode(shaderType) {
        if (shaderType === "vertex") {
            return {
                CUSTOM_VERTEX_DEFINITIONS: `
                    varying vec3 vWorldPos;
                `,
                CUSTOM_VERTEX_MAIN_END: `
                    vWorldPos = worldPos.xyz; 
                `
            }
        }
        if (shaderType === "fragment") {
            // we're adding this specific code at the end of the main() function
            return {
                CUSTOM_FRAGMENT_DEFINITIONS: `
                    varying vec3 vWorldPos;
                `,
                CUSTOM_FRAGMENT_MAIN_END: `
                    float d = length(vWorldPos.xyz - fogCenter);
                    d = (10.0 - d)/10.0;
                    gl_FragColor.rgb *= vec3(d);
                `
            };
        }
        // for other shader types we're not doing anything, return null
        return null;
    }
}*/

new App("");



// move camera:


/*


//Scroll down to createScene() for usage
class KeyboardPanningInput extends ArcRotateCameraKeyboardMoveInput {
    constructor(matrix, vector) {
        super();

        this.matrix = matrix;
        this.displacement = vector;
    }

    checkInputs() {
        if(this._onKeyboardObserver) {
            const camera = this.camera;
            const m = this.matrix;

            this.camera.absoluteRotation.toRotationMatrix(m);

            for(let index = 0; index < this._keys.length; index++) {
                const keyCode = this._keys[index];

                if (this.keysReset.indexOf(keyCode) !== -1) {
                    if (camera.useInputToRestoreState) {
                        camera.restoreState();
                        continue;
                    }
                }                
				//Matrix magic see https://www.3dgep.com/understanding-the-view-matrix/ and
				//   https://forum.babylonjs.com/t/arc-rotate-camera-panning-on-button-click/15428/6 
                else if (this.keysLeft.indexOf(keyCode) !== -1) {
                    this.displacement.set(-m.m[0], -m.m[1], -m.m[2]);
                } 
                
                else if (this.keysUp.indexOf(keyCode) !== -1) {
                    this.displacement.set(m.m[8], 0, m.m[10]);
                } 
                
                else if (this.keysRight.indexOf(keyCode) !== -1) {
                    this.displacement.set(m.m[0], m.m[1], m.m[2]);
                } 
                
                else if (this.keysDown.indexOf(keyCode) !== -1) {
                    this.displacement.set(-m.m[8], 0, -m.m[10]);
                } 
                
                this.camera.target.addInPlace(this.displacement);
                this.camera.position.addInPlace(this.displacement);
                this.displacement.setAll(0);                
            }
        }
    }
}


function buildLevelMeshes() {
	const ground = Mesh.CreateGround("ground", 10, 10, 0);
    ground.material = new StandardMaterial("groundMat");
    ground.material.diffuseColor = new Color3(0.5,0,5,0.5);	
	
	const player = MeshBuilder.CreateBox("p", {size: 1});	
	player.position = new Vector3(-2,0.5,-2);
	player.material = new StandardMaterial("p");	
	player.material.diffuseColor = new Color3(0,1,0);	
	
	const enemy = MeshBuilder.CreateBox("e", {size: 1});	
	enemy.position = new Vector3(3,0.5,3);
	enemy.material = new StandardMaterial("e");	
	enemy.material.diffuseColor = new Color3(1,0,0);	
	
	return {ground, player, enemy};
}

function babylonInit() {
    var scene = new Scene(engine);
	
    var light = new HemisphericLight("light1", new Vector3(0, 1, 0), scene);
    light.intensity = 0.7;

	return {scene};
}

var createScene = function () {
	const {scene} = babylonInit();
	const {ground, player, enemy} = buildLevelMeshes();
	

	const camera = new ArcRotateCamera("StrategicCamera", Math.PI/3, Math.PI/3, 32, Vector3.Zero(), scene);
	 
	//adapt accordingly, escpecially panningSensibility
	camera.allowUpsideDown = false;
	camera.lowerBetaLimit = 0
	camera.upperBetaLimit = Math.PI/3		
	camera.lowerRadiusLimit = 2;
	camera.upperRadiusLimit = 48;
	camera.angularSensibility = 16000;
	camera.panningSensibility = 4000;   	
	//-
	
	//IMPORTANT
	camera.inputs.removeByType("ArcRotateCameraKeyboardMoveInput");
	camera.inputs.add(new KeyboardPanningInput(new Matrix(), Vector3.Zero()));	 	
	//-
	
	const w = 87;
	const s = 83;
	const d = 68;
	const a = 65;
	
	camera.keysUp.push(w); 
	camera.keysDown.push(s);            
	camera.keysRight.push(d);
	camera.keysLeft.push(a);
	
	camera.attachControl(canvas, true);
	
	return scene;
}



*/